//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace weatherapp.WeatherService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string mailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> role_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string mail {
            get {
                return this.mailField;
            }
            set {
                if ((object.ReferenceEquals(this.mailField, value) != true)) {
                    this.mailField = value;
                    this.RaisePropertyChanged("mail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> role_id {
            get {
                return this.role_idField;
            }
            set {
                if ((this.role_idField.Equals(value) != true)) {
                    this.role_idField = value;
                    this.RaisePropertyChanged("role_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Class1.responseCurr", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Class1responseCurr : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private weatherapp.WeatherService.Class1data[] dataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public weatherapp.WeatherService.Class1data[] data {
            get {
                return this.dataField;
            }
            set {
                if ((object.ReferenceEquals(this.dataField, value) != true)) {
                    this.dataField = value;
                    this.RaisePropertyChanged("data");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Class1.data", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Class1data : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double app_tempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string city_nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double cloudsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string country_codeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string datetimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double high_tempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double low_tempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double rhField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string sunrise_tsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string sunset_tsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string timezoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private weatherapp.WeatherService.Class1weather weatherField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string wind_cdirField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double wind_spdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double app_temp {
            get {
                return this.app_tempField;
            }
            set {
                if ((this.app_tempField.Equals(value) != true)) {
                    this.app_tempField = value;
                    this.RaisePropertyChanged("app_temp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string city_name {
            get {
                return this.city_nameField;
            }
            set {
                if ((object.ReferenceEquals(this.city_nameField, value) != true)) {
                    this.city_nameField = value;
                    this.RaisePropertyChanged("city_name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double clouds {
            get {
                return this.cloudsField;
            }
            set {
                if ((this.cloudsField.Equals(value) != true)) {
                    this.cloudsField = value;
                    this.RaisePropertyChanged("clouds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string country_code {
            get {
                return this.country_codeField;
            }
            set {
                if ((object.ReferenceEquals(this.country_codeField, value) != true)) {
                    this.country_codeField = value;
                    this.RaisePropertyChanged("country_code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string datetime {
            get {
                return this.datetimeField;
            }
            set {
                if ((object.ReferenceEquals(this.datetimeField, value) != true)) {
                    this.datetimeField = value;
                    this.RaisePropertyChanged("datetime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double high_temp {
            get {
                return this.high_tempField;
            }
            set {
                if ((this.high_tempField.Equals(value) != true)) {
                    this.high_tempField = value;
                    this.RaisePropertyChanged("high_temp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double low_temp {
            get {
                return this.low_tempField;
            }
            set {
                if ((this.low_tempField.Equals(value) != true)) {
                    this.low_tempField = value;
                    this.RaisePropertyChanged("low_temp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double rh {
            get {
                return this.rhField;
            }
            set {
                if ((this.rhField.Equals(value) != true)) {
                    this.rhField = value;
                    this.RaisePropertyChanged("rh");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string sunrise_ts {
            get {
                return this.sunrise_tsField;
            }
            set {
                if ((object.ReferenceEquals(this.sunrise_tsField, value) != true)) {
                    this.sunrise_tsField = value;
                    this.RaisePropertyChanged("sunrise_ts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string sunset_ts {
            get {
                return this.sunset_tsField;
            }
            set {
                if ((object.ReferenceEquals(this.sunset_tsField, value) != true)) {
                    this.sunset_tsField = value;
                    this.RaisePropertyChanged("sunset_ts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string timezone {
            get {
                return this.timezoneField;
            }
            set {
                if ((object.ReferenceEquals(this.timezoneField, value) != true)) {
                    this.timezoneField = value;
                    this.RaisePropertyChanged("timezone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public weatherapp.WeatherService.Class1weather weather {
            get {
                return this.weatherField;
            }
            set {
                if ((object.ReferenceEquals(this.weatherField, value) != true)) {
                    this.weatherField = value;
                    this.RaisePropertyChanged("weather");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string wind_cdir {
            get {
                return this.wind_cdirField;
            }
            set {
                if ((object.ReferenceEquals(this.wind_cdirField, value) != true)) {
                    this.wind_cdirField = value;
                    this.RaisePropertyChanged("wind_cdir");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double wind_spd {
            get {
                return this.wind_spdField;
            }
            set {
                if ((this.wind_spdField.Equals(value) != true)) {
                    this.wind_spdField = value;
                    this.RaisePropertyChanged("wind_spd");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Class1.weather", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Class1weather : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string iconField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string icon {
            get {
                return this.iconField;
            }
            set {
                if ((object.ReferenceEquals(this.iconField, value) != true)) {
                    this.iconField = value;
                    this.RaisePropertyChanged("icon");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Class1.responseFore", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Class1responseFore : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string city_nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private weatherapp.WeatherService.Class1data[] dataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string city_name {
            get {
                return this.city_nameField;
            }
            set {
                if ((object.ReferenceEquals(this.city_nameField, value) != true)) {
                    this.city_nameField = value;
                    this.RaisePropertyChanged("city_name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public weatherapp.WeatherService.Class1data[] data {
            get {
                return this.dataField;
            }
            set {
                if ((object.ReferenceEquals(this.dataField, value) != true)) {
                    this.dataField = value;
                    this.RaisePropertyChanged("data");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WeatherService.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/IsAdmin", ReplyAction="http://tempuri.org/IService/IsAdminResponse")]
        bool IsAdmin(weatherapp.WeatherService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/IsAdmin", ReplyAction="http://tempuri.org/IService/IsAdminResponse")]
        System.Threading.Tasks.Task<bool> IsAdminAsync(weatherapp.WeatherService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/MainMethodCurr", ReplyAction="http://tempuri.org/IService/MainMethodCurrResponse")]
        weatherapp.WeatherService.Class1responseCurr MainMethodCurr(string city, bool toggleSwitchUnits);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/MainMethodCurr", ReplyAction="http://tempuri.org/IService/MainMethodCurrResponse")]
        System.Threading.Tasks.Task<weatherapp.WeatherService.Class1responseCurr> MainMethodCurrAsync(string city, bool toggleSwitchUnits);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/MainMethodFore", ReplyAction="http://tempuri.org/IService/MainMethodForeResponse")]
        weatherapp.WeatherService.Class1responseFore MainMethodFore(string city, bool toggleSwitchUnits);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/MainMethodFore", ReplyAction="http://tempuri.org/IService/MainMethodForeResponse")]
        System.Threading.Tasks.Task<weatherapp.WeatherService.Class1responseFore> MainMethodForeAsync(string city, bool toggleSwitchUnits);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UnixSecondsToDateTime", ReplyAction="http://tempuri.org/IService/UnixSecondsToDateTimeResponse")]
        System.DateTime UnixSecondsToDateTime(long timestamp, bool local);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UnixSecondsToDateTime", ReplyAction="http://tempuri.org/IService/UnixSecondsToDateTimeResponse")]
        System.Threading.Tasks.Task<System.DateTime> UnixSecondsToDateTimeAsync(long timestamp, bool local);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        weatherapp.WeatherService.User Login(string usernametxt, string passwordtxt, bool rememberMe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        System.Threading.Tasks.Task<weatherapp.WeatherService.User> LoginAsync(string usernametxt, string passwordtxt, bool rememberMe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Registration", ReplyAction="http://tempuri.org/IService/RegistrationResponse")]
        bool Registration(string usernametxt, string passwordtxt, string mail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Registration", ReplyAction="http://tempuri.org/IService/RegistrationResponse")]
        System.Threading.Tasks.Task<bool> RegistrationAsync(string usernametxt, string passwordtxt, string mail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/convertUnitsTemp", ReplyAction="http://tempuri.org/IService/convertUnitsTempResponse")]
        string convertUnitsTemp(string str, bool toggleSwitchUnits);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/convertUnitsTemp", ReplyAction="http://tempuri.org/IService/convertUnitsTempResponse")]
        System.Threading.Tasks.Task<string> convertUnitsTempAsync(string str, bool toggleSwitchUnits);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendMail", ReplyAction="http://tempuri.org/IService/SendMailResponse")]
        bool SendMail(string toEmail, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendMail", ReplyAction="http://tempuri.org/IService/SendMailResponse")]
        System.Threading.Tasks.Task<bool> SendMailAsync(string toEmail, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ValidateUser", ReplyAction="http://tempuri.org/IService/ValidateUserResponse")]
        weatherapp.WeatherService.User ValidateUser(string mail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ValidateUser", ReplyAction="http://tempuri.org/IService/ValidateUserResponse")]
        System.Threading.Tasks.Task<weatherapp.WeatherService.User> ValidateUserAsync(string mail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveUserLogToDB", ReplyAction="http://tempuri.org/IService/SaveUserLogToDBResponse")]
        void SaveUserLogToDB(string mail, string ip, string mac, string username, int role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveUserLogToDB", ReplyAction="http://tempuri.org/IService/SaveUserLogToDBResponse")]
        System.Threading.Tasks.Task SaveUserLogToDBAsync(string mail, string ip, string mac, string username, int role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getnewresult", ReplyAction="http://tempuri.org/IService/getnewresultResponse")]
        void getnewresult();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getnewresult", ReplyAction="http://tempuri.org/IService/getnewresultResponse")]
        System.Threading.Tasks.Task getnewresultAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : weatherapp.WeatherService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<weatherapp.WeatherService.IService>, weatherapp.WeatherService.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsAdmin(weatherapp.WeatherService.User user) {
            return base.Channel.IsAdmin(user);
        }
        
        public System.Threading.Tasks.Task<bool> IsAdminAsync(weatherapp.WeatherService.User user) {
            return base.Channel.IsAdminAsync(user);
        }
        
        public weatherapp.WeatherService.Class1responseCurr MainMethodCurr(string city, bool toggleSwitchUnits) {
            return base.Channel.MainMethodCurr(city, toggleSwitchUnits);
        }
        
        public System.Threading.Tasks.Task<weatherapp.WeatherService.Class1responseCurr> MainMethodCurrAsync(string city, bool toggleSwitchUnits) {
            return base.Channel.MainMethodCurrAsync(city, toggleSwitchUnits);
        }
        
        public weatherapp.WeatherService.Class1responseFore MainMethodFore(string city, bool toggleSwitchUnits) {
            return base.Channel.MainMethodFore(city, toggleSwitchUnits);
        }
        
        public System.Threading.Tasks.Task<weatherapp.WeatherService.Class1responseFore> MainMethodForeAsync(string city, bool toggleSwitchUnits) {
            return base.Channel.MainMethodForeAsync(city, toggleSwitchUnits);
        }
        
        public System.DateTime UnixSecondsToDateTime(long timestamp, bool local) {
            return base.Channel.UnixSecondsToDateTime(timestamp, local);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> UnixSecondsToDateTimeAsync(long timestamp, bool local) {
            return base.Channel.UnixSecondsToDateTimeAsync(timestamp, local);
        }
        
        public weatherapp.WeatherService.User Login(string usernametxt, string passwordtxt, bool rememberMe) {
            return base.Channel.Login(usernametxt, passwordtxt, rememberMe);
        }
        
        public System.Threading.Tasks.Task<weatherapp.WeatherService.User> LoginAsync(string usernametxt, string passwordtxt, bool rememberMe) {
            return base.Channel.LoginAsync(usernametxt, passwordtxt, rememberMe);
        }
        
        public bool Registration(string usernametxt, string passwordtxt, string mail) {
            return base.Channel.Registration(usernametxt, passwordtxt, mail);
        }
        
        public System.Threading.Tasks.Task<bool> RegistrationAsync(string usernametxt, string passwordtxt, string mail) {
            return base.Channel.RegistrationAsync(usernametxt, passwordtxt, mail);
        }
        
        public string convertUnitsTemp(string str, bool toggleSwitchUnits) {
            return base.Channel.convertUnitsTemp(str, toggleSwitchUnits);
        }
        
        public System.Threading.Tasks.Task<string> convertUnitsTempAsync(string str, bool toggleSwitchUnits) {
            return base.Channel.convertUnitsTempAsync(str, toggleSwitchUnits);
        }
        
        public bool SendMail(string toEmail, string username, string password) {
            return base.Channel.SendMail(toEmail, username, password);
        }
        
        public System.Threading.Tasks.Task<bool> SendMailAsync(string toEmail, string username, string password) {
            return base.Channel.SendMailAsync(toEmail, username, password);
        }
        
        public weatherapp.WeatherService.User ValidateUser(string mail) {
            return base.Channel.ValidateUser(mail);
        }
        
        public System.Threading.Tasks.Task<weatherapp.WeatherService.User> ValidateUserAsync(string mail) {
            return base.Channel.ValidateUserAsync(mail);
        }
        
        public void SaveUserLogToDB(string mail, string ip, string mac, string username, int role) {
            base.Channel.SaveUserLogToDB(mail, ip, mac, username, role);
        }
        
        public System.Threading.Tasks.Task SaveUserLogToDBAsync(string mail, string ip, string mac, string username, int role) {
            return base.Channel.SaveUserLogToDBAsync(mail, ip, mac, username, role);
        }
        
        public void getnewresult() {
            base.Channel.getnewresult();
        }
        
        public System.Threading.Tasks.Task getnewresultAsync() {
            return base.Channel.getnewresultAsync();
        }
    }
}
